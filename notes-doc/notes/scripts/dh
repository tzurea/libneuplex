#!/usr/bin/python3.10
import os
import re
import pathlib
import argparse
import subprocess
import requests
import json


class AnkiApi:
	"""
	### Class (* -> required)
	AnkiApi(host:str, port:str)

		### Attributes (Public)
		host:str
		port:str

		### Methods (Public)
		create_model(*model_name:str, *in_order_model_fields:list, card_name:str, model_css:str, template_front:str, template_back:str) -> dict
		create_deck(*deck_name:str) -> dict
		fetch_picture(*url:str, *filename:str, fields:list) -> dict
		fetch_audio(*url:str, *filename:str, fields:list) -> dict
		create_note(*field_vals:list, deck_name:str, model_name:str, allow_duplicate:bool, tags:list, audios:list, making_note_list:bool) -> dict
		create_notes(*notes:list) -> dict
		exec(req_query:dict) -> json_obj

		### Methods (Private)
		_find_model_fields_by_name(*model_name:str) -> list
		_catch_error(*json_resp:json_obj)
	"""

	### Default Values
	default_in_order_model_fields = ['Front', 'Back']
	default_model_css = """
.card {
font-family: arial;
font-size: 20px;
text-align: center;
color: black;
background-color: white;
}
"""
	default_template_front = '{{Front}}'
	default_template_back = """
{{FrontSide}}

<hr id=answer>

{{Back}}
"""
	def __init__(self, host='http://localhost', port='8765'):
		self.host = host
		self.port = port

	def create_model(self, model_name, 
		in_order_model_fields=default_in_order_model_fields, 
		card_name='Card 1' ,
		model_css=default_model_css, 
		template_front=default_template_front, 
		template_back=default_template_back):

		model = {
			'modelName': model_name,
			'inOrderFields': in_order_model_fields,
			'css': model_css,
			'cardTemplates': [{
				'Name': card_name,
				'Front': template_front,
				'Back': template_back
			}]
		}

		req_query = {
			'action': 'createModel',
			'version': 6,
			'params': model
		}
		return req_query

	def _catch_error(self, json_resp):
		dict_resp = json.loads(json_resp)
		if dict_resp['error'] is not None:
			raise Exception(dict_resp['error'])
		elif dict_resp['result'] is None:
			raise Exception('Empty result')

	def _find_model_fields_by_name(self, model_name):
		req_query = {
			'action': 'modelFieldNames',
			'version': 6,
			'params': {
				'modelName':  model_name
			}
		}
		resp = self.exec(req_query)

		model_fields = json.loads(resp)['result']
		return model_fields

	def create_deck(self, deck_name):
		req_query = {
			'action': 'createDeck',
			'version': 6,
			'params': {
				'deck': deck_name
			}
		}
		return req_query
	
	def fetch_picture(self, url, filename, fields = ['Front']):
		picture = {
			'url': url,
			'filename': filename,
			'fields': fields
		}
		return picture

	def fetch_audio(self, url, filename, fields = ['Back']):
		audio = {
			'url': url,
			'filename': filename,
			'fields': fields
		}
		return audio

	def create_note(self, field_vals, deck_name='Default', model_name='Basic', allow_duplicate=False, 
		duplicate_scope='deck', tags=[], audios=[], pictures=[], making_note_list=False):

		model_fields = self._find_model_fields_by_name(model_name)
		if not len(model_fields) == len(field_vals):
			raise Exception('Field length does not match')

		populated_fields = {k:v for k,v in zip(model_fields, field_vals)}
		note = {
			'deckName': deck_name,
			'modelName': model_name,
			'fields': populated_fields,
			'options': {
				'allowDuplicate': allow_duplicate,
				'duplicateScope': duplicate_scope
			},
			'tags': tags,
			'audio': audios,
			'picture': pictures
		}

		if making_note_list:
			return note

		req_query = {
			'action': 'addNote',
			'version': 6,
			'params': {
				'note': note
			}
		}
		return req_query

	def create_notes(self, notes):
		req_query = {
			'action': 'addNotes',
			'version': 6,
			'params': {
				'notes': notes
			}
		}
		return req_query

		
	def exec(self, req_query):
		try:
			resp = requests.post(self.host+':'+str(self.port), json.dumps(req_query)).text
		except:
			raise Exception('AnkiConnect Local Server not running')
		self._catch_error(resp)
		return resp













fnroot="/home/azine/dist/notes/"
fname = "README.md"
anki = AnkiApi()

parse = argparse.ArgumentParser(allow_abbrev=True)
parse.add_argument('--topic', type=str, required=True)
parse.add_argument('--stopic', type=str, required=True)
parse.add_argument('--element', type=str, required=True)
parse.add_argument('--mode', type=str, required=True)
args = parse.parse_args()


def mkdir(froot):
    if not os.path.exists(froot): 
        os.makedirs(froot)


def inputent(fnroot, topic, stopic, element, mstr, mode, fname, commit):
    fmpath = os.path.join(fnroot,topic,stopic,element,mstr,mode)
    fnpath = os.path.join(fmpath,fname)
    mkdir(fmpath)
    if  not os.path.exists(fnpath):
        pathlib.Path(fnpath).touch()
    subprocess.run(["nvim", fnpath])
    subprocess.run(["git", "add", fnpath])
    subprocess.run(["git", "commit", "-m", commit])
    
def adrv(fnroot,topic,stopic,element,mstr,mode,fname,dckhie,memcit):
    file = open(os.path.join(fnroot,topic,stopic,element,mstr,mode,fname))
    lines = file.readlines()
    linect = []
    linefr = []
    parabr = []
    strbra = " "

    for index,value in enumerate(lines):
        if ":" in value:
            linect.append(index)
            linefr.append(re.sub(':',' ',value))
   
    for index,value in enumerate(linect):
        strcra = "  "
        if value == linect[-1] : break
        strlst = lines[value+1:linect[index+1]-1]
        for value in strlst:
            strcra = strcra + value 
        parabr.append(strcra)

    for value in range(linect[-1]+1,len(lines)):
        strbra = strbra + lines[value]
    parabr.append(strbra) 

    file.close()
    model = "Basic"
    deck = "pool" + "::" + topic + "::" + stopic + "::" + element + "::" + mstr + "::" + mode
    tags = [topic,stopic,element,element+mstr,element+mode]
    query = anki.create_deck(deck)
    try:
        anki.exec(query)
    except Exception:
        pass
    for index,value in enumerate(linefr):
        try:
            note = anki.create_note([memcit[0] + value,parabr[index]],deck,model,tags=tags)
            out = anki.exec(note)
            print(out)
        except Exception:
            pass


def aexp(fnroot,topic,stopic,element,mstr,mode,fname,dckhie,memcit):
    file = open(os.path.join(fnroot,topic,stopic,element,mstr,mode,fname))
    lines = file.readlines()
    cardfr = []
    cardbr = []

    for index in lines:
        if ':' not in index : continue
        charst = index.find(':')
        cardfr.append(index[0:charst])
        cardbr.append(index[charst+1:-1])
    
    file.close()

    model = "Basic"
    deck = "pool" + "::" + topic + "::" + stopic + "::" + element + "::" + mstr + "::" + mode
    tags = [topic,stopic,element,element+mstr,element+mode]
    query = anki.create_deck(deck)
    try:
        anki.exec(query)
    except Exception:
        pass
    for index,value in enumerate(cardfr):
        try:
            note = anki.create_note([memcit[0] + value,cardbr[index]],deck,model,tags=tags)
            anki.exec(note)
        except Exception:
            pass


def ahmemcit(fnroot,topic,stopic,element,mstr,mode,fname,dckhie,memcit):
    file = open(os.path.join(fnroot,topic,stopic,element,mstr,mode,fname))
    lines = file.readlines()
    linect = []
    linefr = []
    parabr = []
    strbra = " "

    for index,value in enumerate(lines):
        if "~" in value:
            linect.append(index)
            linefr.append(re.sub('~',' ',value))
   
    for index,value in enumerate(linect):
        strcra = "  "
        if value == linect[-1] : break
        strlst = lines[value+1:linect[index+1]-1]
        for value in strlst:
            strcra = strcra + value 
        parabr.append(strcra)

    for value in range(linect[-1]+1,len(lines)):
        strbra = strbra + lines[value]
    parabr.append(strbra) 

    file.close()
    model = "Basic"
    deck = "pool" + "::" + topic + "::" + stopic + "::" + element + "::" + mstr + "::" + mode
    tags = [topic,stopic,element,element+mstr,element+mode]
    try:
        query = anki.create_deck(deck)
    except Exception:
        pass
    anki.exec(query)
    for index,value in enumerate(linefr):
        if "{{c" in value:
            model = "Cloze"
        else :
            model = "Basic"
        try:
            note = anki.create_note([value,parabr[index]],deck,model,tags=tags)
            print(note)
            out = anki.exec(note)
            print(out)
        except Exception:
            pass


def apst(fnroot,topic,stopic,element,mstr,mode,fname,dckhie,memcit):
    file = open(os.path.join(fnroot,topic,stopic,element,mstr,mode,fname))
    lines = file.readlines()
    linect = []
    linefr = []
    parabr = []
    strbra = "  "

    for index,value in enumerate(lines):
        if ":" in value:
            linect.append(index)
            linefr.append(re.sub(':',' ',value))
   
    for index,value in enumerate(linect):
        strcra = "  "
        if value == linect[-1] : break
        strlst = lines[value+1:linect[index+1]-1]
        for value in strlst:
            strcra = strcra + value 
        parabr.append(strcra)

    for value in range(linect[-1]+1,len(lines)):
        strbra = strbra + lines[value]
    parabr.append(strbra) 

    file.close()
    model = "Basic"
    deck = "pool::pst" + "::" + topic + "::" + stopic + "::" + element + "::" + mstr + "::" + mode
    tags = [topic,stopic,element,element+mstr,element+mode]
    query = anki.create_deck(deck)
    try:
        anki.exec(query)
    except Exception:
        pass
    for index,value in enumerate(linefr):
        try:
            note = anki.create_note([memcit[0] + value ,parabr[index]],deck,model,tags=tags)
            anki.exec(note)
        except Exception:
            pass



if __name__ == '__main__':
    if args.mode == "drv":
        commit = "Add derivations for " + args.element + " in " + args.stopic 
        memcit = ["How to derive the expression of ", args.element, args.stopic] 
        dckhie = [args.topic, args.stopic, args.element, "mchar", "drv"]
        inputent(fnroot, args.topic, args.stopic, args.element, "mchar", args.mode, fname ,commit)
        adrv(fnroot,args.topic,args.stopic,args.element,"mchar",args.mode,fname,dckhie,memcit)

    if args.mode == "exp":
        commit = "Add expressions for " + args.element + " in " + args.stopic 
        memcit = ["What is the expression of  ", args.element, args.stopic] 
        dckhie = [args.topic, args.stopic, args.element, "mchar", "exp"]
        inputent(fnroot, args.topic, args.stopic, args.element, "mchar", args.mode, fname ,commit)
        aexp(fnroot,args.topic,args.stopic,args.element,"mchar",args.mode,fname,dckhie,memcit)


    if args.mode == "pst":
        commit = "Add problem set entries for " + args.element + " in " + args.stopic
        memcit = [ "Review problem for ", args.element, args.stopic ]
        dckhie = [args.topic, args.stopic, args.element, "mchar", "pst"]
        inputent(fnroot, args.topic, args.stopic, args.element, "mchar", args.mode, fname ,commit)
        apst(fnroot,args.topic,args.stopic,args.element,"mchar",args.mode,fname,dckhie,memcit)


    if args.mode == "pss":
        commit = "Add problem solving stat for " + args.element + " in " + args.stopic 
        memcit = ["What is the general strategy to ", args.element, args.stopic] 
        dckhie = [args.topic, args.stopic, args.element, "mchar", "pss"]
        inputent(fnroot, args.topic, args.stopic, args.element, "mchar", args.mode, fname ,commit)
        adrv(fnroot,args.topic,args.stopic,args.element,"mchar",args.mode,fname,dckhie,memcit)


    if args.mode == "fct":
        commit = "Add fact as " + args.element + " in " + args.stopic 
        memcit = ["What is the ", args.element, args.stopic] 
        dckhie = [args.topic, args.stopic, args.element, "stint", "fct"]
        inputent(fnroot, args.topic, args.stopic, args.element, "stint", args.mode, fname, commit )
        aexp(fnroot,args.topic,args.stopic,args.element,"stint",args.mode,fname,dckhie,memcit)


    if args.mode == "trm":
        commit = "Add terms for " + args.element + " in " + args.stopic 
        memcit = ["What do you mean by ", args.element, args.stopic] 
        dckhie = [args.topic, args.stopic, args.element, "stint", "trm"]
        inputent(fnroot, args.topic, args.stopic, args.element, "stint", args.mode, fname, commit )
        aexp(fnroot,args.topic,args.stopic,args.element,"stint",args.mode,fname,dckhie,memcit)


    if args.mode == "tre":
        commit = "Add term surrogate for " + args.element + " in " + args.stopic 
        memcit = [args.element, args.stopic]
        dckhie = [args.topic, args.stopic, args.element, "stint", "tre"]
        inputent(fnroot, args.topic, args.stopic, args.element, "stint", args.mode, fname, commit )
        ahmemcit(fnroot,args.topic,args.stopic,args.element,"stint",args.mode,fname,dckhie,memcit)


    if args.mode == "mll":
        commit = "Add multi lines for " + args.element + " in " + args.stopic 
        memcit = [args.element, args.stopic]
        dckhie = [args.topic, args.stopic, args.element, "stint", "mll"]
        inputent(fnroot, args.topic, args.stopic, args.element, "stint", args.mode, fname, commit )
        ahmemcit(fnroot,args.topic,args.stopic,args.element,"stint",args.mode,fname,dckhie,memcit)


    if args.mode == "res":
        commit = "Add reasons for " + args.element + " in " + args.stopic 
        memcit = [args.element, args.stopic]
        dckhie = [args.topic, args.stopic, args.element, "stint", "res"]
        inputent(fnroot, args.topic, args.stopic, args.element, "stint", args.mode, fname, commit )
        ahmemcit(fnroot,args.topic,args.stopic,args.element,"stint",args.mode,fname,dckhie,memcit)






